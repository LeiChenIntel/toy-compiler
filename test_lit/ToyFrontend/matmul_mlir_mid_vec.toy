# RUN: toy-translate %s -emit=mlir-mid -opt -lower-pat=vector 2>&1 | FileCheck %s

def funcInputs() {
  varf64 a<4,4> = [0];
  varf64 b<4,4> = [0];
  varf64 c<4,4> = [0];
}

def matmul(a, b, c) {
  varf64 d = a * b;
  store(d, c);
  return;
  # CHECK-LABEL: func.func @matmul(%arg0: memref<4x4xf64>, %arg1: memref<4x4xf64>, %arg2: memref<4x4xf64>) {
  # CHECK-NEXT:    %c0 = arith.constant 0 : index
  # CHECK-NEXT:    %reinterpret_cast = memref.reinterpret_cast %arg0 to offset: [0], sizes: [16], strides: [1] : memref<4x4xf64> to memref<16xf64>
  # CHECK-NEXT:    %reinterpret_cast_0 = memref.reinterpret_cast %arg1 to offset: [0], sizes: [16], strides: [1] : memref<4x4xf64> to memref<16xf64>
  # CHECK-NEXT:    %reinterpret_cast_1 = memref.reinterpret_cast %arg2 to offset: [0], sizes: [16], strides: [1] : memref<4x4xf64> to memref<16xf64>
  # CHECK-NEXT:    %0 = vector.load %reinterpret_cast[%c0] : memref<16xf64>, vector<16xf64>
  # CHECK-NEXT:    %1 = vector.load %reinterpret_cast_0[%c0] : memref<16xf64>, vector<16xf64>
  # CHECK-NEXT:    %2 = vector.matrix_multiply %0, %1 {lhs_columns = 4 : i32, lhs_rows = 4 : i32, rhs_columns = 4 : i32} : (vector<16xf64>, vector<16xf64>) -> vector<16xf64>
  # CHECK-NEXT:    vector.store %2, %reinterpret_cast_1[%c0] : memref<16xf64>, vector<16xf64>
  # CHECK-NEXT:    return
}
