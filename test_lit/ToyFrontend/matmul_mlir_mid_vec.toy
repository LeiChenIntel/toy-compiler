# RUN: toy-translate %s -emit=mlir-mid -opt -lower-pat=vector 2>&1 | FileCheck %s
# UNSUPPORTED: true

def funcInputs() {
  varf64 a<3, 4> = [0];
  varf64 b<4, 3> = [0];
  varf64 c<3, 3> = [0];
  varbf16 a_bf16<4, 5> = [0];
  varbf16 b_bf16<5, 6> = [0];
  varbf16 c_bf16<4, 6> = [0];
}

def matmul_f64_param_input(a, b, c) {
  varf64 d = a * b;
  store(d, c);
  return;
  # CHECK-LABEL: func.func @matmul_f64_param_input(%arg0: memref<3x4xf64>, %arg1: memref<4x3xf64>, %arg2: memref<3x3xf64>) {
  # CHECK-NEXT:    %c0 = arith.constant 0 : index
  # CHECK-NEXT:    %reinterpret_cast = memref.reinterpret_cast %arg0 to offset: [0], sizes: [12], strides: [1] : memref<3x4xf64> to memref<12xf64>
  # CHECK-NEXT:    %reinterpret_cast_0 = memref.reinterpret_cast %arg1 to offset: [0], sizes: [12], strides: [1] : memref<4x3xf64> to memref<12xf64>
  # CHECK-NEXT:    %reinterpret_cast_1 = memref.reinterpret_cast %arg2 to offset: [0], sizes: [9], strides: [1] : memref<3x3xf64> to memref<9xf64>
  # CHECK-NEXT:    %0 = vector.load %reinterpret_cast[%c0] : memref<12xf64>, vector<12xf64>
  # CHECK-NEXT:    %1 = vector.load %reinterpret_cast_0[%c0] : memref<12xf64>, vector<12xf64>
  # CHECK-NEXT:    %2 = vector.matrix_multiply %0, %1 {lhs_columns = 4 : i32, lhs_rows = 3 : i32, rhs_columns = 3 : i32} : (vector<12xf64>, vector<12xf64>) -> vector<9xf64>
  # CHECK-NEXT:    vector.store %2, %reinterpret_cast_1[%c0] : memref<9xf64>, vector<9xf64>
  # CHECK-NEXT:    return
  # CHECK-NEXT:  }
}

def matmul_bf16_param_input(a_bf16, b_bf16, c_bf16) {
  varbf16 d = a_bf16 * b_bf16;
  store(d, c_bf16);
  return;
  # CHECK-LABEL: func.func @matmul_bf16_param_input(%arg0: memref<4x5xbf16>, %arg1: memref<5x6xbf16>, %arg2: memref<4x6xbf16>) {
  # CHECK-NEXT:    %c0 = arith.constant 0 : index
  # CHECK-NEXT:    %reinterpret_cast = memref.reinterpret_cast %arg0 to offset: [0], sizes: [20], strides: [1] : memref<4x5xbf16> to memref<20xbf16>
  # CHECK-NEXT:    %reinterpret_cast_0 = memref.reinterpret_cast %arg1 to offset: [0], sizes: [30], strides: [1] : memref<5x6xbf16> to memref<30xbf16>
  # CHECK-NEXT:    %reinterpret_cast_1 = memref.reinterpret_cast %arg2 to offset: [0], sizes: [24], strides: [1] : memref<4x6xbf16> to memref<24xbf16>
  # CHECK-NEXT:    %0 = vector.load %reinterpret_cast[%c0] : memref<20xbf16>, vector<20xbf16>
  # CHECK-NEXT:    %1 = vector.load %reinterpret_cast_0[%c0] : memref<30xbf16>, vector<30xbf16>
  # CHECK-NEXT:    %2 = vector.matrix_multiply %0, %1 {lhs_columns = 5 : i32, lhs_rows = 4 : i32, rhs_columns = 6 : i32} : (vector<20xbf16>, vector<30xbf16>) -> vector<24xbf16>
  # CHECK-NEXT:    vector.store %2, %reinterpret_cast_1[%c0] : memref<24xbf16>, vector<24xbf16>
  # CHECK-NEXT:    return
  # CHECK-NEXT:  }
}
