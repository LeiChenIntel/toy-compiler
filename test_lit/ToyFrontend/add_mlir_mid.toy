# RUN: toy-translate %s -emit=mlir-mid -opt 2>&1 | FileCheck %s

def funcInputs() {
  varf64 a<2, 3> = [0];
  varf64 b<2, 3> = [0];
}

def add_param_input_mid(a, b) {
  varf64 c = a + b;
  print(c);
  # CHECK-LABEL: func.func @add_param_input_mid(%arg0: memref<2x3xf64>, %arg1: memref<2x3xf64>) {
  # CHECK-NEXT:    %alloc = memref.alloc() : memref<2x3xf64>
  # CHECK-NEXT:    affine.for %arg2 = 0 to 2 {
  # CHECK-NEXT:      affine.for %arg3 = 0 to 3 {
  # CHECK-NEXT:        %0 = affine.load %arg0[%arg2, %arg3] : memref<2x3xf64>
  # CHECK-NEXT:        %1 = affine.load %arg1[%arg2, %arg3] : memref<2x3xf64>
  # CHECK-NEXT:        %2 = arith.addf %0, %1 : f64
  # CHECK-NEXT:        affine.store %2, %alloc[%arg2, %arg3] : memref<2x3xf64>
  # CHECK-NEXT:      }
  # CHECK-NEXT:    }
  # CHECK-NEXT:    toy.print(%alloc) : memref<2x3xf64>
  # CHECK-NEXT:    memref.dealloc %alloc : memref<2x3xf64>
  # CHECK-NEXT:    return
  # CHECK-NEXT:  }
}

def add_const_mid() {
  varf64 a<2, 3> = [1, 2, 3, 4, 5, 6];
  varf64 b<2, 3> = [1, 2, 3, 4, 5, 6];
  varf64 c = a + b;
  print(c);
  # CHECK-LABEL: func.func @add_const_mid() {
  # CHECK-NEXT:    %cst = arith.constant 1.200000e+01 : f64
  # CHECK-NEXT:    %cst_0 = arith.constant 1.000000e+01 : f64
  # CHECK-NEXT:    %cst_1 = arith.constant 8.000000e+00 : f64
  # CHECK-NEXT:    %cst_2 = arith.constant 6.000000e+00 : f64
  # CHECK-NEXT:    %cst_3 = arith.constant 4.000000e+00 : f64
  # CHECK-NEXT:    %cst_4 = arith.constant 2.000000e+00 : f64
  # CHECK-NEXT:    %alloc = memref.alloc() : memref<2x3xf64>
  # CHECK-NEXT:    affine.store %cst_4, %alloc[0, 0] : memref<2x3xf64>
  # CHECK-NEXT:    affine.store %cst_3, %alloc[0, 1] : memref<2x3xf64>
  # CHECK-NEXT:    affine.store %cst_2, %alloc[0, 2] : memref<2x3xf64>
  # CHECK-NEXT:    affine.store %cst_1, %alloc[1, 0] : memref<2x3xf64>
  # CHECK-NEXT:    affine.store %cst_0, %alloc[1, 1] : memref<2x3xf64>
  # CHECK-NEXT:    affine.store %cst, %alloc[1, 2] : memref<2x3xf64>
  # CHECK-NEXT:    toy.print(%alloc) : memref<2x3xf64>
  # CHECK-NEXT:    memref.dealloc %alloc : memref<2x3xf64>
  # CHECK-NEXT:    return
  # CHECK-NEXT:  }
}
