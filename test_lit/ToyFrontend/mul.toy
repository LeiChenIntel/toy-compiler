# RUN: toy-translate %s -emit=mlir 2>&1 | FileCheck %s

def funcInputs() {
  var a<2, 3> = [1, 2, 3, 4, 5, 6];
  var b<2, 3> = [1, 2, 3, 4, 5, 6];
}

def mul_param_input(a, b) {
  var c = a .* b;
  print(c);
  # CHECK-LABEL: toy.func @mul_param_input(%arg0: tensor<2x3xf64>, %arg1: tensor<2x3xf64>) {
  # CHECK-NEXT:    [[VAL_0:%.*]] = toy.mul(%arg0, %arg1) : tensor<2x3xf64>, tensor<2x3xf64> -> tensor<2x3xf64>
  # CHECK-NEXT:    toy.print([[VAL_0]]) : tensor<2x3xf64>
  # CHECK-NEXT:    toy.return
  # CHECK-NEXT:  }
}

def mul_param_input_no_shape(d, a) {
  var c = d .* a;
  print(c);
  # CHECK-LABEL: toy.func @mul_param_input_no_shape(%arg0: tensor<*xf64>, %arg1: tensor<2x3xf64>) {
  # CHECK-NEXT:    [[VAL_0:%.*]] = toy.mul(%arg0, %arg1) : tensor<*xf64>, tensor<2x3xf64> -> tensor<*xf64>
  # CHECK-NEXT:    toy.print([[VAL_0]]) : tensor<*xf64>
  # CHECK-NEXT:    toy.return
  # CHECK-NEXT:  }
}

def mul_const() {
  var a<2, 3> = [1, 2, 3, 4, 5, 6];
  var b<2, 3> = [1, 2, 3, 4, 5, 6];
  var c = a .* b;
  print(c);
  # CHECK-LABEL: toy.func @mul_const() {
  # CHECK-NEXT:    [[VAL_0:%.*]] = toy.constant {value = dense<[1.000000e+00, 2.000000e+00, 3.000000e+00, 4.000000e+00, 5.000000e+00, 6.000000e+00]> : tensor<6xf64>} : tensor<6xf64>
  # CHECK-NEXT:    [[VAL_1:%.*]] = toy.reshape([[VAL_0]]) : tensor<6xf64> -> tensor<2x3xf64>
  # CHECK-NEXT:    [[VAL_2:%.*]] = toy.constant {value = dense<[1.000000e+00, 2.000000e+00, 3.000000e+00, 4.000000e+00, 5.000000e+00, 6.000000e+00]> : tensor<6xf64>} : tensor<6xf64>
  # CHECK-NEXT:    [[VAL_3:%.*]] = toy.reshape([[VAL_2]]) : tensor<6xf64> -> tensor<2x3xf64>
  # CHECK-NEXT:    [[VAL_4:%.*]] = toy.mul([[VAL_1]], [[VAL_3]]) : tensor<2x3xf64>, tensor<2x3xf64> -> tensor<2x3xf64>
  # CHECK-NEXT:    toy.print([[VAL_4]]) : tensor<2x3xf64>
  # CHECK-NEXT:    toy.return
  # CHECK-NEXT:  }
}
