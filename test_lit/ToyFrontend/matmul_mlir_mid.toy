# RUN: toy-translate %s -emit=mlir-mid -opt 2>&1 | FileCheck %s

def funcInputs() {
  varf64 a<3,4> = [0];
  varf64 b<4,3> = [0];
  varf64 c<3,3> = [0];
}

def matmul(a, b, c) {
  varf64 d = a * b;
  store(d, c);
  return;
  # CHECK-LABEL: func.func @matmul(%arg0: memref<3x4xf64>, %arg1: memref<4x3xf64>, %arg2: memref<3x3xf64>) {
  # CHECK-NEXT:    affine.for %arg3 = 0 to 3 {      
  # CHECK-NEXT:      affine.for %arg4 = 0 to 3 {
  # CHECK-NEXT:        affine.for %arg5 = 0 to 4 {
  # CHECK-NEXT:          %0 = affine.load %arg0[%arg3, %arg5] : memref<3x4xf64>
  # CHECK-NEXT:          %1 = affine.load %arg1[%arg4, %arg5] : memref<4x3xf64>
  # CHECK-NEXT:          %2 = arith.mulf %0, %1 : f64
  # CHECK-NEXT:          %3 = affine.load %arg2[%arg3, %arg4] : memref<3x3xf64>
  # CHECK-NEXT:          %4 = arith.addf %2, %3 : f64
  # CHECK-NEXT:          affine.store %4, %arg2[%arg3, %arg4] : memref<3x3xf64>
  # CHECK-NEXT:        }
  # CHECK-NEXT:      } 
  # CHECK-NEXT:    }     
  # CHECK-NEXT:    return        
  # CHECK-NEXT:  }         
}
